// Code generated by MockGen. DO NOT EDIT.
// Source: gemini/client.go
//
// Generated by this command:
//
//	mockgen -source=gemini/client.go -destination=gemini/mocks/client_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gemini "github.com/mephirious/helper-for-teachers/services/exam-svc/internal/adapter/gemini"
	gomock "go.uber.org/mock/gomock"
)

// MockExamGenerator is a mock of ExamGenerator interface.
type MockExamGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockExamGeneratorMockRecorder
	isgomock struct{}
}

// MockExamGeneratorMockRecorder is the mock recorder for MockExamGenerator.
type MockExamGeneratorMockRecorder struct {
	mock *MockExamGenerator
}

// NewMockExamGenerator creates a new mock instance.
func NewMockExamGenerator(ctrl *gomock.Controller) *MockExamGenerator {
	mock := &MockExamGenerator{ctrl: ctrl}
	mock.recorder = &MockExamGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExamGenerator) EXPECT() *MockExamGeneratorMockRecorder {
	return m.recorder
}

// GenerateExam mocks base method.
func (m *MockExamGenerator) GenerateExam(ctx context.Context, numQuestions, numTasks int, grade, topic string) (*gemini.ExamGenResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateExam", ctx, numQuestions, numTasks, grade, topic)
	ret0, _ := ret[0].(*gemini.ExamGenResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateExam indicates an expected call of GenerateExam.
func (mr *MockExamGeneratorMockRecorder) GenerateExam(ctx, numQuestions, numTasks, grade, topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateExam", reflect.TypeOf((*MockExamGenerator)(nil).GenerateExam), ctx, numQuestions, numTasks, grade, topic)
}
