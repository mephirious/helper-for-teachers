// Code generated by MockGen. DO NOT EDIT.
// Source: nats/publisher.go
//
// Generated by this command:
//
//	mockgen -source=nats/publisher.go -destination=nats/mocks/publisher_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/mephirious/helper-for-teachers/services/exam-svc/internal/domain"
	pb "github.com/mephirious/helper-for-teachers/services/exam-svc/proto"
	gomock "go.uber.org/mock/gomock"
)

// MockEventPusher is a mock of EventPusher interface.
type MockEventPusher struct {
	ctrl     *gomock.Controller
	recorder *MockEventPusherMockRecorder
	isgomock struct{}
}

// MockEventPusherMockRecorder is the mock recorder for MockEventPusher.
type MockEventPusherMockRecorder struct {
	mock *MockEventPusher
}

// NewMockEventPusher creates a new mock instance.
func NewMockEventPusher(ctrl *gomock.Controller) *MockEventPusher {
	mock := &MockEventPusher{ctrl: ctrl}
	mock.recorder = &MockEventPusherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventPusher) EXPECT() *MockEventPusherMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockEventPusher) Push(ctx context.Context, exam *domain.Exam, eventType pb.ExamEventType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, exam, eventType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockEventPusherMockRecorder) Push(ctx, exam, eventType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockEventPusher)(nil).Push), ctx, exam, eventType)
}
