// Code generated by MockGen. DO NOT EDIT.
// Source: redis/interface.go
//
// Generated by this command:
//
//	mockgen -source=redis/interface.go -destination=redis/mocks/redis_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/mephirious/helper-for-teachers/services/exam-svc/internal/domain"
	repository "github.com/mephirious/helper-for-teachers/services/exam-svc/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockExamCache is a mock of ExamCache interface.
type MockExamCache struct {
	ctrl     *gomock.Controller
	recorder *MockExamCacheMockRecorder
	isgomock struct{}
}

// MockExamCacheMockRecorder is the mock recorder for MockExamCache.
type MockExamCacheMockRecorder struct {
	mock *MockExamCache
}

// NewMockExamCache creates a new mock instance.
func NewMockExamCache(ctrl *gomock.Controller) *MockExamCache {
	mock := &MockExamCache{ctrl: ctrl}
	mock.recorder = &MockExamCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExamCache) EXPECT() *MockExamCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockExamCache) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockExamCacheMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExamCache)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockExamCache) Get(ctx context.Context, id string) (domain.Exam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.Exam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExamCacheMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExamCache)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockExamCache) GetAll(ctx context.Context) ([]domain.Exam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.Exam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockExamCacheMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockExamCache)(nil).GetAll), ctx)
}

// Init mocks base method.
func (m *MockExamCache) Init(ctx context.Context, repo repository.ExamRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockExamCacheMockRecorder) Init(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockExamCache)(nil).Init), ctx, repo)
}

// Set mocks base method.
func (m *MockExamCache) Set(ctx context.Context, exam domain.Exam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, exam)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockExamCacheMockRecorder) Set(ctx, exam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockExamCache)(nil).Set), ctx, exam)
}

// SetMany mocks base method.
func (m *MockExamCache) SetMany(ctx context.Context, exams []domain.Exam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMany", ctx, exams)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMany indicates an expected call of SetMany.
func (mr *MockExamCacheMockRecorder) SetMany(ctx, exams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMany", reflect.TypeOf((*MockExamCache)(nil).SetMany), ctx, exams)
}

// MockQuestionCache is a mock of QuestionCache interface.
type MockQuestionCache struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionCacheMockRecorder
	isgomock struct{}
}

// MockQuestionCacheMockRecorder is the mock recorder for MockQuestionCache.
type MockQuestionCacheMockRecorder struct {
	mock *MockQuestionCache
}

// NewMockQuestionCache creates a new mock instance.
func NewMockQuestionCache(ctrl *gomock.Controller) *MockQuestionCache {
	mock := &MockQuestionCache{ctrl: ctrl}
	mock.recorder = &MockQuestionCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionCache) EXPECT() *MockQuestionCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockQuestionCache) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockQuestionCacheMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQuestionCache)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockQuestionCache) Get(ctx context.Context, id string) (domain.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQuestionCacheMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQuestionCache)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockQuestionCache) GetAll(ctx context.Context) ([]domain.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockQuestionCacheMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockQuestionCache)(nil).GetAll), ctx)
}

// Init mocks base method.
func (m *MockQuestionCache) Init(ctx context.Context, repo repository.QuestionRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockQuestionCacheMockRecorder) Init(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockQuestionCache)(nil).Init), ctx, repo)
}

// Set mocks base method.
func (m *MockQuestionCache) Set(ctx context.Context, question domain.Question) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, question)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockQuestionCacheMockRecorder) Set(ctx, question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockQuestionCache)(nil).Set), ctx, question)
}

// SetMany mocks base method.
func (m *MockQuestionCache) SetMany(ctx context.Context, questions []domain.Question) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMany", ctx, questions)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMany indicates an expected call of SetMany.
func (mr *MockQuestionCacheMockRecorder) SetMany(ctx, questions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMany", reflect.TypeOf((*MockQuestionCache)(nil).SetMany), ctx, questions)
}

// MockTaskCache is a mock of TaskCache interface.
type MockTaskCache struct {
	ctrl     *gomock.Controller
	recorder *MockTaskCacheMockRecorder
	isgomock struct{}
}

// MockTaskCacheMockRecorder is the mock recorder for MockTaskCache.
type MockTaskCacheMockRecorder struct {
	mock *MockTaskCache
}

// NewMockTaskCache creates a new mock instance.
func NewMockTaskCache(ctrl *gomock.Controller) *MockTaskCache {
	mock := &MockTaskCache{ctrl: ctrl}
	mock.recorder = &MockTaskCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskCache) EXPECT() *MockTaskCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTaskCache) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskCacheMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskCache)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockTaskCache) Get(ctx context.Context, id string) (domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskCacheMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskCache)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockTaskCache) GetAll(ctx context.Context) ([]domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTaskCacheMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTaskCache)(nil).GetAll), ctx)
}

// Init mocks base method.
func (m *MockTaskCache) Init(ctx context.Context, repo repository.TaskRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockTaskCacheMockRecorder) Init(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTaskCache)(nil).Init), ctx, repo)
}

// Set mocks base method.
func (m *MockTaskCache) Set(ctx context.Context, task domain.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockTaskCacheMockRecorder) Set(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTaskCache)(nil).Set), ctx, task)
}

// SetMany mocks base method.
func (m *MockTaskCache) SetMany(ctx context.Context, tasks []domain.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMany", ctx, tasks)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMany indicates an expected call of SetMany.
func (mr *MockTaskCacheMockRecorder) SetMany(ctx, tasks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMany", reflect.TypeOf((*MockTaskCache)(nil).SetMany), ctx, tasks)
}
