// Code generated by MockGen. DO NOT EDIT.
// Source: in-memory/interface.go
//
// Generated by this command:
//
//	mockgen -source=in-memory/interface.go -destination=in-memory/mocks/inmemory_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/mephirious/helper-for-teachers/services/exam-svc/internal/domain"
	repository "github.com/mephirious/helper-for-teachers/services/exam-svc/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockExamCacheInterface is a mock of ExamCacheInterface interface.
type MockExamCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExamCacheInterfaceMockRecorder
	isgomock struct{}
}

// MockExamCacheInterfaceMockRecorder is the mock recorder for MockExamCacheInterface.
type MockExamCacheInterfaceMockRecorder struct {
	mock *MockExamCacheInterface
}

// NewMockExamCacheInterface creates a new mock instance.
func NewMockExamCacheInterface(ctrl *gomock.Controller) *MockExamCacheInterface {
	mock := &MockExamCacheInterface{ctrl: ctrl}
	mock.recorder = &MockExamCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExamCacheInterface) EXPECT() *MockExamCacheInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockExamCacheInterface) Delete(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0)
}

// Delete indicates an expected call of Delete.
func (mr *MockExamCacheInterfaceMockRecorder) Delete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExamCacheInterface)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockExamCacheInterface) Get(arg0 string) (domain.Exam, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(domain.Exam)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExamCacheInterfaceMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExamCacheInterface)(nil).Get), arg0)
}

// GetAll mocks base method.
func (m *MockExamCacheInterface) GetAll() []domain.Exam {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Exam)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockExamCacheInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockExamCacheInterface)(nil).GetAll))
}

// Init mocks base method.
func (m *MockExamCacheInterface) Init(ctx context.Context, repo repository.ExamRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockExamCacheInterfaceMockRecorder) Init(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockExamCacheInterface)(nil).Init), ctx, repo)
}

// Set mocks base method.
func (m *MockExamCacheInterface) Set(arg0 domain.Exam) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0)
}

// Set indicates an expected call of Set.
func (mr *MockExamCacheInterfaceMockRecorder) Set(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockExamCacheInterface)(nil).Set), arg0)
}

// SetMany mocks base method.
func (m *MockExamCacheInterface) SetMany(arg0 []domain.Exam) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMany", arg0)
}

// SetMany indicates an expected call of SetMany.
func (mr *MockExamCacheInterfaceMockRecorder) SetMany(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMany", reflect.TypeOf((*MockExamCacheInterface)(nil).SetMany), arg0)
}

// MockQuestionCacheInterface is a mock of QuestionCacheInterface interface.
type MockQuestionCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionCacheInterfaceMockRecorder
	isgomock struct{}
}

// MockQuestionCacheInterfaceMockRecorder is the mock recorder for MockQuestionCacheInterface.
type MockQuestionCacheInterfaceMockRecorder struct {
	mock *MockQuestionCacheInterface
}

// NewMockQuestionCacheInterface creates a new mock instance.
func NewMockQuestionCacheInterface(ctrl *gomock.Controller) *MockQuestionCacheInterface {
	mock := &MockQuestionCacheInterface{ctrl: ctrl}
	mock.recorder = &MockQuestionCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionCacheInterface) EXPECT() *MockQuestionCacheInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockQuestionCacheInterface) Delete(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0)
}

// Delete indicates an expected call of Delete.
func (mr *MockQuestionCacheInterfaceMockRecorder) Delete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQuestionCacheInterface)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockQuestionCacheInterface) Get(arg0 string) (domain.Question, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(domain.Question)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQuestionCacheInterfaceMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQuestionCacheInterface)(nil).Get), arg0)
}

// GetAll mocks base method.
func (m *MockQuestionCacheInterface) GetAll() []domain.Question {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Question)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockQuestionCacheInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockQuestionCacheInterface)(nil).GetAll))
}

// Init mocks base method.
func (m *MockQuestionCacheInterface) Init(ctx context.Context, repo repository.QuestionRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockQuestionCacheInterfaceMockRecorder) Init(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockQuestionCacheInterface)(nil).Init), ctx, repo)
}

// Set mocks base method.
func (m *MockQuestionCacheInterface) Set(arg0 domain.Question) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0)
}

// Set indicates an expected call of Set.
func (mr *MockQuestionCacheInterfaceMockRecorder) Set(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockQuestionCacheInterface)(nil).Set), arg0)
}

// SetMany mocks base method.
func (m *MockQuestionCacheInterface) SetMany(arg0 []domain.Question) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMany", arg0)
}

// SetMany indicates an expected call of SetMany.
func (mr *MockQuestionCacheInterfaceMockRecorder) SetMany(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMany", reflect.TypeOf((*MockQuestionCacheInterface)(nil).SetMany), arg0)
}

// MockTaskCacheInterface is a mock of TaskCacheInterface interface.
type MockTaskCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskCacheInterfaceMockRecorder
	isgomock struct{}
}

// MockTaskCacheInterfaceMockRecorder is the mock recorder for MockTaskCacheInterface.
type MockTaskCacheInterfaceMockRecorder struct {
	mock *MockTaskCacheInterface
}

// NewMockTaskCacheInterface creates a new mock instance.
func NewMockTaskCacheInterface(ctrl *gomock.Controller) *MockTaskCacheInterface {
	mock := &MockTaskCacheInterface{ctrl: ctrl}
	mock.recorder = &MockTaskCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskCacheInterface) EXPECT() *MockTaskCacheInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTaskCacheInterface) Delete(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0)
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskCacheInterfaceMockRecorder) Delete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskCacheInterface)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockTaskCacheInterface) Get(arg0 string) (domain.Task, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(domain.Task)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskCacheInterfaceMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskCacheInterface)(nil).Get), arg0)
}

// GetAll mocks base method.
func (m *MockTaskCacheInterface) GetAll() []domain.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Task)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTaskCacheInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTaskCacheInterface)(nil).GetAll))
}

// Init mocks base method.
func (m *MockTaskCacheInterface) Init(ctx context.Context, repo repository.TaskRepository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockTaskCacheInterfaceMockRecorder) Init(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTaskCacheInterface)(nil).Init), ctx, repo)
}

// Set mocks base method.
func (m *MockTaskCacheInterface) Set(arg0 domain.Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0)
}

// Set indicates an expected call of Set.
func (mr *MockTaskCacheInterfaceMockRecorder) Set(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTaskCacheInterface)(nil).Set), arg0)
}

// SetMany mocks base method.
func (m *MockTaskCacheInterface) SetMany(arg0 []domain.Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMany", arg0)
}

// SetMany indicates an expected call of SetMany.
func (mr *MockTaskCacheInterfaceMockRecorder) SetMany(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMany", reflect.TypeOf((*MockTaskCacheInterface)(nil).SetMany), arg0)
}
